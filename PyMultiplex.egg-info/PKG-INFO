Metadata-Version: 2.4
Name: PyMultiplex
Version: 1.1
Summary: Transfer data across multiple virtual channels over a single socket connection using multiplexing
Home-page: https://github.com/GefenAltshuler/PyMultiplex
Author: Gaffner
Author-email: gefen102@gmail.com
Classifier: Programming Language :: Python :: 3
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: summary

# PyMultiplex

## Overview

PyMultiplex is a Python package that allows you to open serval virtual channels over single socket connections, much similar like SSH Connection. the original purpose was create reverse-tunneler, but all purpses can be filled - especally usefull in environment where you can open only one socket to your destination server. simply put Multiplex server in one side, Multiplex client on the other server, and you can open many "virtual sockets", which is transperent to you - the server listen for new port for each client as requested by him, and open a new chhanel for every new connection to this forwarder socket. You can read more about reverse tunnel in here https://en.wikipedia.org/wiki/Reverse_connection or https://qbee.io/misc/reverse-ssh-tunneling-the-ultimate-guide/ .


## How It Works

The Multiplex package consists of two main components:

1. **MultiplexServer**: Listens for incoming connections and handles multiple client connections by creating a new thread for each client, and listen for his requested port. for each new connection to the requested port, another thread is created to create virtual pipe between the two sockets.

2. **MultiplexClient**: Connects to the multiplex server, open remote forwarder on the server, and then forwards all data comming to this remote-forwarding-port to the target server (identical to SSH -R).

## Usage

### Command Line

You can run the server and client using the following commands, for run on remote tunnel mode:

#### Server

```bash
multiplex server --bind 0.0.0.0 --port 8080
```

#### Client

```bash
multiplex client --host 127.0.0.1 --port 8080 --to-host wtfismyip.com --to-port 80 --remote-forward-port 1726
```
Then, you can connect to the local port open on 1726, the same as you would connect to the target host. for example:

```bash
curl http://127.0.0.1:1726/json -H "Host: wtfismyip.com"
{
  "YourFuckingLocation": "Santa Clara, CA, United States",
  "YourFuckingCity": "Santa Clara",
  "YourFuckingCountry": "United States",
  "YourFuckingCountryCode": "US"
  ....
}
```
### Python Code

You can also use the Multiplex package in your Python code:

#### Server

```python
from Multiplex.MultiplexServer import MultiplexServer

server = MultiplexServer(('0.0.0.0', 8080))
server.start()
```

#### Client

```python
from Multiplex.MultiplexClient import MultiplexClient

client = MultiplexClient(('127.0.0.1', 8080), ('wtfismyip.com', 80))
client.start()
```

## Installation

To install the package, navigate to the project directory and run:

```bash
pip install -e .
```

This will install the package in development mode, allowing you to make changes to the code without reinstalling.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
